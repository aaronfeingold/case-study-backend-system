version: "3.9"

services:
  postgres:
    image: pgvector/pgvector:pg16
    container_name: case-study-postgres
    restart: unless-stopped
    ports:
      - "5433:5432"
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-case-study}
      POSTGRES_USER: ${POSTGRES_USER:-case-study}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres-init/init-postgres.sql:/docker-entrypoint-initdb.d/init-postgres.sql:ro
    networks:
      - case-study-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-case-study} -d ${POSTGRES_DB:-case-study}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local-db
      - monitoring
      - full

  redis:
    image: redis:7-alpine
    container_name: case-study-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - case-study-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    profiles:
      - local-db
      - monitoring
      - full

  # Flask API with WebSocket support
  api:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: case-study-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-case-study}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-case-study}
      - POSTGRES_DB=${POSTGRES_DB:-case-study}
      - POSTGRES_USER=${POSTGRES_USER:-case-study}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
      - CONTAINER_REDIS_URL=redis://redis:6379/0
      - CONTAINER_CELERY_BROKER_URL=redis://redis:6379/0
      - CONTAINER_CELERY_RESULT_BACKEND=redis://redis:6379/1

      # Environment Settings
      - FLASK_ENV=${FLASK_ENV:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}
      - DEBUG=${DEBUG:-true}

      # AI/LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4o}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.75}

      # File Storage
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-./uploads}

      # Frontend & CORS
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:3000}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://localhost:3001}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:3001}

      # WebSocket Configuration
      - WEBSOCKET_ASYNC_MODE=${WEBSOCKET_ASYNC_MODE:-threading}
      - WEBSOCKET_LOGGER=${WEBSOCKET_LOGGER:-true}

      # Security
      - WEBHOOK_SECRET=${WEBHOOK_SECRET:-dev-webhook-secret}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-dev-secret-key-change-in-production}

      # Application Settings
      - APP_VERSION=${APP_VERSION:-1.0.0-dev}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
      - BATCH_PROCESSING_SIZE=${BATCH_PROCESSING_SIZE:-5}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-2}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-120}

      # Monitoring & Metrics
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH:-/metrics}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-10}
      - ENABLE_PROFILING=${ENABLE_PROFILING:-true}

      # Embedding Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - EMBEDDING_DIMENSIONS=${EMBEDDING_DIMENSIONS:-1536}

      # Python Path
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    networks:
      - case-study-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - api
      - full

  # Production API with Neon DB (no local postgres dependency)
  api-production:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: case-study-api-prod
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database Configuration (Neon)
      - DATABASE_URL=${NEON_DATABASE_URL}
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}

      # Redis Configuration (External or Container)
      - REDIS_URL=${PRODUCTION_REDIS_URL:-redis://redis:6379/0}
      - CELERY_BROKER_URL=${PRODUCTION_REDIS_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${PRODUCTION_REDIS_URL:-redis://redis:6379/1}
      - PRODUCTION_REDIS_URL=${PRODUCTION_REDIS_URL}
      - CONTAINER_REDIS_URL=redis://redis:6379/0
      - CONTAINER_CELERY_BROKER_URL=redis://redis:6379/0
      - CONTAINER_CELERY_RESULT_BACKEND=redis://redis:6379/1

      # Environment Settings
      - FLASK_ENV=production
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false

      # AI/LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4o}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.8}

      # File Storage
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER:-./uploads}

      # Frontend & CORS
      - FRONTEND_URL=${FRONTEND_URL:-https://your-app.vercel.app}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS}
      - CORS_ORIGINS=${CORS_ORIGINS}

      # WebSocket Configuration
      - WEBSOCKET_ASYNC_MODE=${WEBSOCKET_ASYNC_MODE:-eventlet}
      - WEBSOCKET_LOGGER=${WEBSOCKET_LOGGER:-false}

      # Security
      - WEBHOOK_SECRET=${WEBHOOK_SECRET}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - SSL_DISABLE=${SSL_DISABLE:-false}
      - SECURE_HEADERS=${SECURE_HEADERS:-true}
      - SESSION_COOKIE_SECURE=${SESSION_COOKIE_SECURE:-true}
      - SESSION_COOKIE_HTTPONLY=${SESSION_COOKIE_HTTPONLY:-true}

      # Application Settings
      - APP_VERSION=${APP_VERSION:-1.0.0}
      - MAX_CONTENT_LENGTH=${MAX_CONTENT_LENGTH:-16777216}
      - BATCH_PROCESSING_SIZE=${BATCH_PROCESSING_SIZE:-10}
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-300}

      # Monitoring & Metrics
      - METRICS_ENABLED=${METRICS_ENABLED:-true}
      - PROMETHEUS_METRICS_PATH=${PROMETHEUS_METRICS_PATH:-/metrics}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      - HEALTH_CHECK_INTERVAL=${HEALTH_CHECK_INTERVAL:-30}
      - HEALTH_CHECK_TIMEOUT=${HEALTH_CHECK_TIMEOUT:-10}
      - ENABLE_PROFILING=${ENABLE_PROFILING:-false}

      # Embedding Configuration
      - EMBEDDING_MODEL=${EMBEDDING_MODEL:-text-embedding-3-small}
      - EMBEDDING_DIMENSIONS=${EMBEDDING_DIMENSIONS:-1536}

      # Python Path
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    networks:
      - case-study-network
    depends_on:
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
      - production-api

  # Celery worker for background processing
  worker:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: case-study-worker
    restart: unless-stopped
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql://${POSTGRES_USER:-case-study}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-case-study}
      - POSTGRES_DB=${POSTGRES_DB:-case-study}
      - POSTGRES_USER=${POSTGRES_USER:-case-study}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432

      # Redis Configuration
      - REDIS_URL=redis://redis:6379/0
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1

      # Environment Settings
      - FLASK_ENV=${FLASK_ENV:-development}
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - SECRET_KEY=${SECRET_KEY:-dev-secret-key-change-in-production}

      # AI/LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4o}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.75}

      # Worker Configuration
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-2}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}

      # Python Path
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    networks:
      - case-study-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    command: poetry run celery -A app.services.async_processor.celery_app worker --loglevel=INFO --concurrency=2 --hostname=worker@%h
    healthcheck:
      test:
        [
          "CMD",
          "poetry",
          "run",
          "celery",
          "-A",
          "app.services.async_processor.celery_app",
          "inspect",
          "ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - worker
      - monitoring
      - full

  # Production Celery worker with Neon DB
  worker-production:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: case-study-worker-prod
    restart: unless-stopped
    environment:
      # Database Configuration (Neon)
      - DATABASE_URL=${NEON_DATABASE_URL}
      - NEON_DATABASE_URL=${NEON_DATABASE_URL}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}

      # Redis Configuration
      - REDIS_URL=${PRODUCTION_REDIS_URL:-redis://redis:6379/0}
      - CELERY_BROKER_URL=${PRODUCTION_REDIS_URL:-redis://redis:6379/0}
      - CELERY_RESULT_BACKEND=${PRODUCTION_REDIS_URL:-redis://redis:6379/1}
      - PRODUCTION_REDIS_URL=${PRODUCTION_REDIS_URL}

      # Environment Settings
      - FLASK_ENV=production
      - ENVIRONMENT=production
      - SECRET_KEY=${SECRET_KEY}
      - DEBUG=false

      # AI/LLM Configuration
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DEFAULT_LLM_MODEL=${DEFAULT_LLM_MODEL:-gpt-4o}
      - CONFIDENCE_THRESHOLD=${CONFIDENCE_THRESHOLD:-0.8}

      # File Storage
      - BLOB_READ_WRITE_TOKEN=${BLOB_READ_WRITE_TOKEN}

      # Worker Configuration
      - WORKER_CONCURRENCY=${WORKER_CONCURRENCY:-4}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

      # Python Path
      - PYTHONPATH=/app
    volumes:
      - ./logs:/app/logs
    networks:
      - case-study-network
    depends_on:
      redis:
        condition: service_healthy
    command: poetry run celery -A app.services.async_processor.celery_app worker --loglevel=INFO --concurrency=4 --hostname=worker-prod@%h
    healthcheck:
      test:
        [
          "CMD",
          "poetry",
          "run",
          "celery",
          "-A",
          "app.services.async_processor.celery_app",
          "inspect",
          "ping",
        ]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production
      - production-worker

  # Celery Flower for monitoring (optional)
  flower:
    build:
      context: ../api
      dockerfile: Dockerfile
    container_name: case-study-flower
    restart: unless-stopped
    ports:
      - "5555:5555"
    environment:
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/1
    networks:
      - case-study-network
    depends_on:
      redis:
        condition: service_healthy
    command: poetry run celery -A app.services.async_processor.celery_app flower --port=5555
    profiles:
      - monitoring
      - full

  # Prometheus - Metrics collection and storage
  prometheus:
    image: prom/prometheus:latest
    container_name: case-study-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ../monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - ../monitoring/prometheus/alert_rules.yml:/etc/prometheus/alert_rules.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--web.enable-lifecycle"
      - "--storage.tsdb.retention.time=30d"
    networks:
      - case-study-network
    profiles:
      - monitoring
      - full
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--quiet",
          "--tries=1",
          "--spider",
          "http://localhost:9090/-/healthy",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Monitoring dashboards and visualization
  grafana:
    image: grafana/grafana:latest
    container_name: case-study-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
      GF_USERS_ALLOW_SIGN_UP: "false"
      GF_SECURITY_ALLOW_EMBEDDING: "true"
    volumes:
      - grafana_data:/var/lib/grafana
      - ../monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ../monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    networks:
      - case-study-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Node Exporter - System and container metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: case-study-node-exporter
    restart: unless-stopped
    ports:
      - "9100:9100"
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - "--path.procfs=/host/proc"
      - "--path.rootfs=/rootfs"
      - "--path.sysfs=/host/sys"
      - "--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)"
    networks:
      - case-study-network
    profiles:
      - monitoring
      - full

  # PostgreSQL Exporter - Database metrics
  postgres-exporter:
    image: prometheuscommunity/postgres-exporter:latest
    container_name: case-study-postgres-exporter
    restart: unless-stopped
    ports:
      - "9187:9187"
    environment:
      DATA_SOURCE_NAME: "postgresql://${POSTGRES_USER:-case-study}:${POSTGRES_PASSWORD:-password}@postgres:5432/${POSTGRES_DB:-case-study}?sslmode=disable"
      PG_EXPORTER_EXTEND_QUERY_PATH: "/etc/postgres_exporter/queries.yaml"
    networks:
      - case-study-network
    depends_on:
      postgres:
        condition: service_healthy
    profiles:
      - monitoring
      - full

  # Redis Exporter - Redis metrics
  redis-exporter:
    image: oliver006/redis_exporter:latest
    container_name: case-study-redis-exporter
    restart: unless-stopped
    ports:
      - "9121:9121"
    environment:
      REDIS_ADDR: "redis://redis:6379"
    networks:
      - case-study-network
    depends_on:
      redis:
        condition: service_healthy
    profiles:
      - monitoring
      - full

  # AlertManager - Alert handling and notifications
  alertmanager:
    image: prom/alertmanager:latest
    container_name: case-study-alertmanager
    restart: unless-stopped
    ports:
      - "9093:9093"
    volumes:
      - ../monitoring/alertmanager/alertmanager.yml:/etc/alertmanager/alertmanager.yml:ro
      - alertmanager_data:/alertmanager
    command:
      - "--config.file=/etc/alertmanager/alertmanager.yml"
      - "--storage.path=/alertmanager"
      - "--web.external-url=http://localhost:9093"
    networks:
      - case-study-network
    depends_on:
      - prometheus
    profiles:
      - monitoring
      - full

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  alertmanager_data:
    driver: local

networks:
  case-study-network:
    driver: bridge
